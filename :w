import { Button, ButtonGroup, Card, Col, Row } from 'react-bootstrap';
import { CircleOfFifths } from '../CircleOfFifths';
import { forwardRef } from 'react';
import { Chord } from '../../theory-utils/chord';
import { BsXLg } from 'react-icons/bs';
import { Scale } from '../../theory-utils/scale';
import _ from 'lodash';

interface ChordPickerProps {
  x: number;
  y: number;
  show: boolean;
  setShow: (show: boolean) => void;
  currChord?: Chord;
  onChordClick: (chord?: Chord) => void;
}

export const ChordPicker = forwardRef(function (
  props: ChordPickerProps,
  ref: React.ForwardedRef<HTMLDivElement>,
) {
  function handleInvertClick(inversion: number) {
    if (props.currChord != null) {
      const newChord = _.cloneDeep(props.currChord);
      console.log(inversion, props.currChord, newChord);
      newChord.inversion = inversion;
      props.onChordClick(newChord);
    }
  }
  function handleOctaveClick(octave: number) {
    if (props.currChord != null) {
      const newChord = _.cloneDeep(props.currChord);
      console.log(props.currChord, newChord);
      newChord.tonic.octave = octave;
      props.onChordClick(newChord);
    }
  }
  return (
    <Card
      body
      style={{
        width: 420,
        position: 'fixed',
        left: props.x,
        top: props.y,
        visibility: props.show ? 'visible' : 'hidden',
        zIndex: 1,
      }}
      onMouseLeave={() => props.setShow(false)}
      ref={ref}
    >
      <Card.Body className="d-flex flex-column gap-2 p-0">
        <h4>{props.currChord?.format('long')}</h4>
        <Button
          variant="outline-danger"
          onClick={() => {
            props.onChordClick(undefined);
          }}
        >
          <BsXLg /> Clear chord
        </Button>
        <CircleOfFifths
          scale={
            props.currChord != null
              ? new Scale(
                  props.currChord.tonic,
                  props.currChord.name === 'Major' ? 'Major' : 'Natural Minor',
                )
              : undefined
          }
          onScaleClick={(scale) => {
            props.onChordClick(
              new Chord(
                scale.tonic,
                scale.name === 'Major' ? 'Major' : 'Minor',
              ),
            );
          }}
        />
        <Row>
          <Col xs={3}>Inversion</Col>
          <Col>
            <ButtonGroup size="sm">
              {[0, 1, 2].map((inversion) => (
                <Button
                  variant="outline-secondary"
                  className={`${props.currChord != null && props.currChord.inversion === inversion ? 'bg-secondary text-light' : ''}`}
                  onClick={() => handleInvertClick(inversion)}
                >
                  {inversion}
                </Button>
              ))}
            </ButtonGroup>
          </Col>
        </Row>
        <Row>
          <Col xs={3}>Octave</Col>
          <Col>
            <ButtonGroup size="sm">
              {[2, 3, 4, 5, 6].map((octave) => (
                <Button
                  variant="outline-secondary"
                  className={`${props.currChord != null && props.currChord.tonic.octave === octave ? 'bg-secondary text-light' : ''}`}
                  onClick={() => handleOctaveClick(octave)}
                >
                  {octave}
                </Button>
              ))}
            </ButtonGroup>
          </Col>
        </Row>
      </Card.Body>
    </Card>
  );
});
